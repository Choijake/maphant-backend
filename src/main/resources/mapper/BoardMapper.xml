<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tovelop.maphant.mapper.BoardMapper">
    <select id="getBoardTypeIdByBoardTypeName" resultType="Int">
        select id
        from board_type
        where name = #{boardTypeName};
    </select>
    <select id="getCategoryIdByCategoryName" resultType="Int">
        select id
        from category
        where name = #{categoryName};
    </select>
    <insert id="insertBoard">
        INSERT INTO board(parent_id, category_id, user_id, type_id, title, body, state, is_hide, is_complete,
                          is_anonymous, created_at, modified_at, comment_cnt, like_cnt, report_cnt, images_url)
        VALUES (#{parentId}, #{categoryId}, #{userId}, #{typeId}, #{title}, #{body}, #{state}, #{isHide}, #{isComplete},
                #{isAnonymous}, NOW(), null, #{commentCnt}, #{likeCnt}, #{reportCnt}, #{imagesUrl})
    </insert>
    <select id="findLastInsertId" resultType="Int">
        select last_insert_id()
    </select>
    <select id="findBoard" resultType="BoardDTO">
        SELECT *
        FROM board
        WHERE board.id = #{boardId}
    </select>
    <update id="updateBoard">
        update board
        set title      = #{title},
            body=#{body},
            is_hide=#{isHide},
            images_url=#{imagesUrl},
            modified_at=NOW()
        where id = #{id}
    </update>
    <update id="deleteBoard">
        update board
        set state = 1
        where id = #{boardId}
    </update>
    <insert id="insertBoardLike">
        insert into board_like(board_id, user_id)
        values (#{boardId}, #{userId})
    </insert>

    <delete id="deleteBoardLike">
        delete
        from board_like
        where board_id = #{boardId}
          and user_id = #{userId}
    </delete>
    <insert id="insertBoardReport">
        insert into board_report(board_id, user_id, report_id, reported_at)
        values (#{boardId}, #{userId}, #{reportId}, now())
    </insert>
    <select id="findBoardByKeyword" resultType="BoardDTO">
        select *
        from board
        where type_id = #{boardTypeId}
            AND category_id = #{categoryId}
            AND (lower(title) like lower(CONCAT('%', #{keyword}, '%'))
           or lower(body) like lower(CONCAT('%', #{keyword}, '%')))
        order by created_at DESC
    </select>
    <select id="findBoardById" resultType="ExtBoardDTO">
        SELECT
            b.id as id,
            b.user_id as userId,
            parent_id as parentId,
            category_id as categoryId,
            IF(is_anonymous, '익명',u.nickname) AS userNickname,
            type_id as typeId,
            title,
            body,
            b.state as state,
            b.is_hide as isHide,
            b.is_complete as isComplete,
            b.is_anonymous as isAnonymous,
            b.created_at as createdAt,
            b.modified_at as modifiedAt,
            b.comment_cnt as commentCnt,
            b.like_cnt as likeCnt,
            b.report_cnt as reportCnt,
            b.images_url as imagesUrlString,
            IF(blike.user_id IS NOT NULL, 1, 0) as isLike,
            IF(u.id = b.user_id, 1, 0) as isMyBoard
        FROM board b
                 INNER JOIN user u ON b.user_id = u.id
                 LEFT OUTER JOIN board_like blike ON b.id = blike.board_id AND blike.user_id = #{userId}
        WHERE b.id = #{boardId}
    </select>
    <select id="findBoardList" resultType="PageBoardDTO">
        select
                b.id as boardId,
                b.title as title,
                SUBSTRING(b.body, 1, 30) as body,
                b.created_at as createdAt,
                b.modified_at as modifiedAt,
                IF(is_anonymous, '익명',u.nickname) AS userNickname,
                b.comment_cnt as commentCnt,
                b.like_cnt as likeCnt,
                b.is_anonymous as isAnonymous,
                b.is_hide as isHide,
                IF(blike.user_id IS NOT NULL, 1, 0) as isLike,
                b.images_url as imagesUrlString,
                GROUP_CONCAT(t.name ORDER BY t.name ASC SEPARATOR ',') as tagStrings
            from board b
                     INNER JOIN user u ON b.user_id = u.id
                     LEFT OUTER JOIN board_like blike ON b.id = blike.board_id AND blike.user_id = #{userId}
                     LEFT OUTER JOIN board_tag ON b.id = board_tag.board_id
                     LEFT OUTER JOIN tag t ON board_tag.tag_id = t.id
            where b.category_id = #{categoryId} AND
                b.type_id = #{findBoardDTO.boardTypeId} AND
                b.state = 0 AND
                is_hide = 0
            GROUP BY b.id
            order by b.${findBoardDTO.sortCriterion} DESC
            limit #{findBoardDTO.pageSize} offset #{startRow}
    </select>

    <select id="getBoardSizeByCategoryIdAndBoardTypeId" resultType="Int">
        select count(*)
        from board
        where category_id = #{categoryId}
          and type_id = #{boardTypeId}
    </select>
    <select id="isInCategory" resultType="String">
        select name
        from category
        where id = #{categoryId}
    </select>
    <select id="isInBoardTypeId" resultType="Int">
        select id
        from board_type
        where id = #{boardTypeId}
    </select>
    <select id="findBoardLike" resultType="BoardLikeDTO">
        select *
        from board_like
        where board_id = #{boardId}
          and user_id = #{userId}
    </select>
    <select id="isInReportByBoardId" resultType="BoardReportDTO">
        select *
        from board_report
        where board_id = #{boardId}
          and user_id = #{userId}
    </select>
    <select id="isInReportId" resultType="String">
        select name
        from report
        where id = #{reportId}
    </select>
    <select id="isInBoardByBoardId" resultType="Int">
        select id
        from board
        where id = #{boardId}
    </select>
    <insert id="insertBoardQna">
        insert into board_qna(question_id, answer_id, complete_at)
        values (#{parentBoardId}, #{childBoardId}, now());
    </insert>
    <update id="updateIsCompleteOfBoard">
        update board
        set is_complete = #{isComplete}
        where id = #{boardId};
    </update>
    <update id="updateStateOfBoard">
        update board
        set state = #{state}
        where id = #{boardId}
    </update>
    <select id="findAnswerBoardListByParentBoardId" resultType="BoardDTO">
        select *
        from board
        where parent_id = #{parentBoardId}
    </select>
    <select id="getAllBoardType" resultType="BoardTypeDTO">
        select *
        from board_type
    </select>

    <select id="findHotBoardsWithBoardType" resultType="PageBoardDto">
        select
               b.id AS boardId,
               title,
               SUBSTRING(b.body, 1, 30) as body,
               b.created_at AS createdAt,
               b.modified_at AS modifiedAt,
               IF(is_anonymous, '익명',u.nickname) AS userNickname,
               comment_cnt AS commentCnt,
               like_cnt AS likeCnt,
               is_anonymous AS isAnonymous,
               is_hide AS isHide,
               IF(blike.user_id IS NOT NULL, 1, 0) as isLike,
               b.images_url as imagesUrlString,
               GROUP_CONCAT(t.name ORDER BY t.name ASC SEPARATOR ',') as tagStrings
        FROM board b
            INNER JOIN user u ON b.user_id = u.id
            LEFT OUTER JOIN board_like blike ON b.id = blike.board_id AND blike.user_id = #{userId}
            LEFT OUTER JOIN board_tag ON b.id = board_tag.board_id
            LEFT OUTER JOIN tag t ON board_tag.tag_id = t.id
        WHERE
            is_hide = 0 AND
            b.state = 0 AND
            b.category_id = #{categoryId} AND
            type_id = #{boardType} AND
            like_cnt >= 0
        GROUP BY b.id
        ORDER BY hot(like_cnt, b.created_at) + RAND(#{seed}) DESC
        LIMIT #{pagingDto.recordSize} OFFSET #{pagingDto.offset}
    </select>

    <select id="getHotBoardCountWithBoardType">
        SELECT COUNT(*)
        FROM board
        WHERE
            is_hide = 0 AND
            state = 0 AND
            category_id = #{categoryId} AND
            type_id = #{boardType} AND
            like_cnt >= 0
    </select>

    <select id="findHotBoards" resultType="HotBoardDto">
        SELECT
            b.id AS boardId,
            title,
            SUBSTRING(b.body, 1, 30) as body,
            b.created_at AS createdAt,
            b.modified_at AS modifiedAt,
            IF(is_anonymous, '익명',u.nickname) AS userNickname,
            comment_cnt AS commentCnt,
            like_cnt AS likeCnt,
            is_anonymous AS isAnonymous,
            is_hide AS isHide,
            IF(blike.user_id IS NOT NULL, 1, 0) as isLike,
            b.images_url as imagesUrlString,
            GROUP_CONCAT(t.name ORDER BY t.name ASC SEPARATOR ',') as tagStrings,
            type_id AS typeId,
            bt.name AS type
        FROM board b
                 INNER JOIN user u ON b.user_id = u.id
                 INNER JOIN board_type bt ON b.type_id = bt.id
                 LEFT OUTER JOIN board_like blike ON b.id = blike.board_id AND blike.user_id = #{userId}
                 LEFT OUTER JOIN board_tag ON b.id = board_tag.board_id
                 LEFT OUTER JOIN tag t ON board_tag.tag_id = t.id
        WHERE
            is_hide = 0 AND
            b.state = 0 AND
            b.category_id = #{categoryId} AND
            like_cnt >= 0
        GROUP BY b.id
        ORDER BY hot(like_cnt, b.created_at) + RAND(#{seed}) DESC
        LIMIT #{pagingDto.recordSize} OFFSET #{pagingDto.offset}
    </select>

    <select id="getHotBoardCount">
        SELECT COUNT(*)
        FROM board
        WHERE
            is_hide = 0 AND
            state = 0 AND
            category_id = #{categoryId} AND
            like_cnt >= 0
    </select>
</mapper>
